# -*- coding: utf-8 -*-
"""HR Analytics - Trail - 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/hr-analytics-trail-1-958782fa-a6c9-48e2-98f1-9ef062717e0d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240209/auto/storage/goog4_request%26X-Goog-Date%3D20240209T102024Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D3bead50ebac4174dd36d66e21bfc17de9655ae5da6e7bd0668d93403fba94252700656263b508a8e2eb17c85e89cbe20324cc49aeed1733a4750d4d040afaf1ac1a9c3dd0a75b8dd58a584d60702786a6fe5a531c283bef9ceb58b747267899a2b0fd867defdfcd9616c9667e8cc3c217863e07cf7bae1da00ddb84d2620771786f2aaac28221efecee7d90a5bb5b60773e7df9d5d4fe63b54e6e0cd24b43a3357c5ae6b8d044776ed24ad18b9938c13d426bd15afa31f146586be3f796ced3fcc971978ec825106afad179696bbc5d4ece468165d5ff87a01ef3561a9f58082ae6bd519e5980f54f0395db3db3ddba2be06c904f76e37ac0589d32def7e3dd6
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'ibm-hr-analytics-attrition-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1067%2F1925%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240209%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240209T102024Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D302b0b807892cdae7b319c334eb614b5577536e24749364e6de6e48ec4add110dfce2c3fbd21762d827f7d13543a95514f61982f241c0984f932cc5bcebc51a7f5e6d3b87eef45fd310293eccd7f067199fff742ab342e45a12e00aa07155aea12e5259a9ae966eae249fa4c22939de4537cf763dd6163f06a56d91dec28f6f596aacdd36a74f9a1d66528a608a90ce6ea927c97e5c2f28a8f7d326bd1f4c532683131d1f04762ae8b60b5ea79ec1198f64ebfcab11de8eb88ba92d85d094ea112dc6ac7ece5192b46a103c1134bf1c5fd5eef26c34a1a491625b9a83ca97f0d2eea0e85476bb3826f412d580522cadefcd9748dd656af523a4e0529d43c9e33'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import numpy as np
import scipy.stats as stats
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns

"""# Importing data"""

data_org = pd.read_csv("/kaggle/input/ibm-hr-analytics-attrition-dataset/WA_Fn-UseC_-HR-Employee-Attrition.csv")

df = data_org.copy()

df.head()

df.shape

df.info()

df.describe()

"""# EDA"""

ear_data = dict()
ear_data['Attrition: Yes'] = df['Attrition'][df['Attrition']=='Yes'].count()
ear_data['Attrition: No'] = df['Attrition'][df['Attrition']=='No'].count()

ax = sns.barplot(y=list(ear_data.values()),
        x=list(ear_data.keys()))

ax.bar_label(ax.containers[0])

ax.set_ylabel("No. of employees")
ax.set_title("Employee Attrition Amount")

plt.pie(ear_data.values(),
        labels=ear_data.keys(),
        autopct="%.1f%%",startangle=90)
plt.title("Employee Attrition as percentages")
plt.show()

gender_sum_data = df.loc[:,['Gender','Age']].groupby('Gender').mean()
gender_sum_data

gender_data = df.loc[:,['Gender','Age']]
gender_data

gender_sum_data={}
gender_sum_data['Male']=float(gender_data[gender_data["Gender"]=='Male']['Age'].mean())
gender_sum_data['Female']=float(gender_data[gender_data["Gender"]=='Female']['Age'].mean())
gender_sum_data['Overall']=float(gender_data['Age'].mean())



f,ax=plt.subplots(1,2,figsize=(8,4))


#plt.subplot(2,1,1)
sns.histplot(data=gender_data[gender_data["Gender"]=='Male'],
             x='Age',
             kde=True,
             color='dodgerblue',
             alpha=0.9,
             ax=ax[0])
ax[0].axvline(x=gender_sum_data['Male'],
            color='blue',
            linestyle='dashed')
ax[0].set_title('Male Age Distribution')
#plt.text(60,120,"Mean = {:.2f} Years Old".format(gender_sum_data['Male']),ha='right',va='top')


#plt.subplot(2,1,2)
sns.histplot(data=gender_data[gender_data["Gender"]=='Female'],
             x='Age',
             kde=True,
             color='mediumpurple',
             alpha=0.9,
             ax=ax[1])
ax[1].axvline(x=gender_sum_data['Female'],
            color='blue',
            linestyle='dashed')
ax[1].set_title('Female Age Distribution')
#plt.text(60,120,"Mean = {:.2f} Years Old".format(gender_sum_data['Female']),ha='right',va='top')

plt.suptitle("Gender wise distribution")




plt.figure(figsize=(8,4))

ax = sns.histplot(data=gender_data,
             x='Age',
             kde=True,
             color='c',
             alpha=0.9)
ax.axvline(x=gender_sum_data['Overall'],
            color='blue',
            linestyle='dashed')
ax.set_title('Overall Age Distribution')
ax.set_xlabel('Age')
ax.set_ylabel('Density')


#plt.tight_layout()
plt.show()

job_sat_data = df.loc[:,['Gender','Attrition','JobSatisfaction']]

f,ax=plt.subplots(1,2,figsize=(8,4))


sns.boxplot(data = job_sat_data[job_sat_data['Gender']=='Male'],x='Attrition',y='JobSatisfaction',order=['No','Yes'],ax=ax[0])
ax[0].set(xlabel="Attrition",ylabel= "Job Satisfaction")
ax[0].set_title("Job Satisfaction among Males")

sns.boxplot(data = job_sat_data[job_sat_data['Gender']=='Female'],x='Attrition',y='JobSatisfaction',order=['No','Yes'],ax=ax[1])
ax[1].set(xlabel="Attrition",ylabel= "Job Satisfaction")
ax[1].set_title("Job Satisfaction among Females")


plt.tight_layout()
plt.show()

job_sat_data['JobSatisfaction'].unique()

plt.figure(figsize=(8,4))
ax = sns.histplot(data = job_sat_data,x='JobSatisfaction',discrete=True)


ax.set_title("Employee Attrition Amount")
plt.show()

gender_sal_data = df.loc[:,['Gender','Attrition','MonthlyIncome']]

plt.figure(figsize=(6,4))

ax = sns.boxplot(data = gender_sal_data,x='Gender',y='MonthlyIncome',order=['Male','Female'])
ax.set_xlabel("Gender")
ax.set_ylabel("Monthly Income")
ax.set_title("Monthly Income by gender")

plt.show()

f,ax=plt.subplots(1,2,figsize=(8,4))

sns.boxplot(data = gender_sal_data[gender_sal_data['Gender']=='Male'],x='Attrition',y='MonthlyIncome',order=['No','Yes'],ax=ax[0])
ax[0].set(xlabel="Attrition",ylabel= "Monthly Income")
ax[0].set_title("Monthly Income among Males")

sns.boxplot(data = gender_sal_data[gender_sal_data['Gender']=='Female'],x='Attrition',y='MonthlyIncome',order=['No','Yes'],ax=ax[1])
ax[1].set(xlabel="Attrition",ylabel= "Monthly Income")
ax[1].set_title("Monthly Income among Females")

plt.tight_layout()
plt.show()

gender_sal_sum = gender_sal_data.groupby("Gender")['MonthlyIncome'].mean().round(2).reset_index()

plt.figure(figsize=(8,4))
ax = sns.barplot(data = gender_sal_sum,x='Gender',y='MonthlyIncome')

ax.bar_label(ax.containers[0])

ax.set_xlabel('Gender')
ax.set_ylabel('Monthly Income')
ax.set_title('Average Monthly Income')

dept_data = df.groupby(['Department','Gender']).size().reset_index(name='Amount')
dept_data

plt.figure(figsize=(8,4))
ax = sns.barplot(data = dept_data,x='Department',y='Amount',hue='Gender')#,bins=[0.5, 1.5, 2.5, 3.5, 4.5])
ax.set_xlabel('Department')
ax.set_ylabel('Amount')
ax.set_title('Dept. wise count of employees')

for container in ax.containers:
    ax.bar_label(container)

"""Generation wise data.
Let us assume data is collected 7 years ago. So data is collected in 2016.

The Silent Generation – born 1928-1945.
The Baby Boomer Generation – born 1946-1964.
Generation X – born 1965-1980.
Millennials – born 1981-1996.
Generation Z – born 1996-2012.
"""

generation_data = df.copy()
generation_data['Year_of_birth'] = 2016 - generation_data['Age']

generation_data.head()

generation_data['Generation'] = pd.cut(generation_data['Year_of_birth'],bins=[1928,1945,1964,1980,1996,2012],labels=['Silent','Baby Boomer','X','Millennials','Z'])

generation_data['TotalWorkingYears'].unique()

generation_data['NumCompaniesWorkedPerYear']=generation_data['NumCompaniesWorked']/(generation_data['TotalWorkingYears']+1)

generation_data.head()

ax = sns.boxplot(data = generation_data,y='Generation',x='NumCompaniesWorked',hue='Attrition',order=['Silent','Baby Boomer','X','Millennials','Z'])#,ax=ax[0])
ax.set(xlabel="No. Companies Worked",ylabel= "Generation")
ax.set_title("No. Companies Worked by different Generations")

'''
Can we really conclude anything?
Not really

'''

ax = sns.boxplot(data = generation_data,y='Generation',x='NumCompaniesWorkedPerYear',hue='Attrition',order=['Silent','Baby Boomer','X','Millennials','Z'])#,ax=ax[0])
ax.set(xlabel="No of companies worked per year",ylabel= "Generation")
ax.set_title("No of companies worked per year for different Generations")

'''

It confirms the idea that newer generations swith companies often


'''

plt.figure(figsize=(8,4))

ax = sns.histplot(data=df[['TotalWorkingYears','Attrition']],
             x='TotalWorkingYears',
             kde=True,
             color='c',
              hue='Attrition',
             alpha=0.9)

ax.set_title('Overall TotalWorkingYears Distribution')
ax.set_xlabel('Total Working Years')
ax.set_ylabel('Density')

plt.show()

plt.figure(figsize=(8,4))

ax = sns.barplot(data=df.groupby(['OverTime','Attrition']).size().reset_index(name="Amount"),
             x='OverTime',
             y='Amount',
             hue='Attrition')

for container in ax.containers:
    ax.bar_label(container)

ax.set_title('Overall Over Time Distribution')
ax.set_xlabel('Over Time')
ax.set_ylabel('Amount')

plt.show()

'''
As we can see there is a correlation between Over Time and Attrition
'''

plt.figure(figsize=(8,4))

ax = sns.histplot(data=df[['PercentSalaryHike','Attrition']],
             x='PercentSalaryHike',
             kde=True,
             color='c',
              hue='Attrition',
             alpha=0.9)

ax.set_title('Overall Percent SalaryHike Distribution')
ax.set_xlabel('Percent Salary Hike')
ax.set_ylabel('Density')

plt.show()

plt.figure(figsize=(8,4))

ax = sns.histplot(data=df.query("Attrition=='Yes'")[['PercentSalaryHike','PerformanceRating']],
             x='PercentSalaryHike',
             kde=True,
             #color='c',
              hue='PerformanceRating',
             alpha=1)

ax.set_title('Overall PerformanceRating Distribution of Attrited Employees')
ax.set_xlabel('PercentSalaryHike')
ax.set_ylabel('Density')

plt.show()

plt.figure(figsize=(8,4))

ax = sns.histplot(df[['PercentSalaryHike','PerformanceRating']],
             x='PercentSalaryHike',
             kde=True,
             #color='c',
              hue='PerformanceRating',
             alpha=1)

ax.set_title('Overall PerformanceRating Distribution of all Employees')
ax.set_xlabel('PercentSalaryHike')
ax.set_ylabel('Density')

plt.show()

'''
As we can see, Salary is Incremented by over 20% for Empl with rating of 4

'''

generation_data_sum = generation_data.query("Attrition=='Yes'").groupby('TrainingTimesLastYear').size()*100 / generation_data.groupby('TrainingTimesLastYear').size()

generation_data_sum = generation_data_sum.reset_index(name="PercentAttrition")
generation_data_sum

plt.figure(figsize=(8,4))
ax = sns.barplot(data = generation_data_sum,x='TrainingTimesLastYear',y='PercentAttrition')

ax.bar_label(ax.containers[0])

ax.set_xlabel('TrainingTimesLastYear')
ax.set_ylabel('PercentAttrition')
ax.set_title('PercentAttrition vs TrainingTimesLastYear')

generation_data_sum_2 = generation_data.query("Attrition=='Yes'").groupby('PerformanceRating').size()*100 / generation_data.groupby('PerformanceRating').size()
generation_data_sum_2 = generation_data_sum_2.reset_index(name="PercentAttrition")

plt.figure(figsize=(8,4))
ax = sns.barplot(data = generation_data_sum_2,x='PerformanceRating',y='PercentAttrition')

ax.bar_label(ax.containers[0])
#ax.yaxis.set_major_formatter(PercentFormatter(1))

ax.set_xlabel('PerformanceRating')
ax.set_ylabel('PercentAttrition')
ax.set_title('PercentAttrition vs PerformanceRating')

'''
Not much difference in attrition rate difference between 4 and 3 rated employees

'''

generation_data_sum_3 = generation_data.query("Attrition=='Yes'").groupby('RelationshipSatisfaction').size()*100 / generation_data.groupby('RelationshipSatisfaction').size()
generation_data_sum_3 = generation_data_sum_3.reset_index(name="PercentAttrition")

plt.figure(figsize=(8,4))
ax = sns.barplot(data = generation_data_sum_3,x='RelationshipSatisfaction',y='PercentAttrition')

ax.bar_label(ax.containers[0])
#ax.yaxis.set_major_formatter(PercentFormatter(1))

ax.set_xlabel('RelationshipSatisfaction')
ax.set_ylabel('PercentAttrition')
ax.set_title('PercentAttrition vs RelationshipSatisfaction')

plt.figure(figsize=(8,4))

ax = sns.histplot(df[['YearsWithCurrManager','RelationshipSatisfaction']],
             x='YearsWithCurrManager',
             kde=True,
             #color='c',
              hue='RelationshipSatisfaction',
             alpha=1)

ax.set_title('Overall RelationshipSatisfaction Distribution of Employees')
ax.set_xlabel('YearsWithCurrManager')
ax.set_ylabel('Density')

plt.show()

plt.figure(figsize=(8,4))

ax = sns.histplot(df.query("Attrition=='Yes'")[['YearsWithCurrManager','RelationshipSatisfaction']],
             x='YearsWithCurrManager',
             kde=True,
             #color='c',
              hue='RelationshipSatisfaction',
             alpha=1)

ax.set_title('Overall RelationshipSatisfaction Distribution of Attrition Employees')
ax.set_xlabel('YearsWithCurrManager')
ax.set_ylabel('Density')

plt.show()

#YearsAtCompany


plt.figure(figsize=(8,4))

ax = sns.histplot(df[['YearsAtCompany','Attrition']],
             x='YearsAtCompany',
             kde=True,
             #color='c',
              hue='Attrition',
             alpha=1)

ax.set_title('Overall Attrition Distribution of Employees')
ax.set_xlabel('YearsAtCompany')
ax.set_ylabel('Density')

plt.show()

#YearsInCurrentRole


plt.figure(figsize=(8,4))

ax = sns.histplot(df[['YearsInCurrentRole','Attrition']],
             x='YearsInCurrentRole',
             kde=True,
             #color='c',
              hue='Attrition',
             alpha=1)

ax.set_title('Overall Attrition Distribution of Employees')
ax.set_xlabel('YearsInCurrentRole')
ax.set_ylabel('Density')

plt.show()

#YearsSinceLastPromotion

plt.figure(figsize=(8,4))

ax = sns.histplot(df[['YearsSinceLastPromotion','Attrition']],
             x='YearsSinceLastPromotion',
             kde=True,
             #color='c',
              hue='Attrition',
             alpha=1)

ax.set_title('Overall Attrition Distribution of Employees')
ax.set_xlabel('YearsSinceLastPromotion')
ax.set_ylabel('Density')

plt.show()

plt.figure(figsize=(8,4))

ax = sns.histplot(df[['YearsWithCurrManager','Attrition']],
             x='YearsWithCurrManager',
             kde=True,
             #color='c',
              hue='Attrition',
             alpha=1)

ax.set_title('Overall Attrition Distribution of Employees')
ax.set_xlabel('YearsWithCurrManager')
ax.set_ylabel('Density')

plt.show()

#MonthlyIncome

plt.figure(figsize=(8,4))

ax = sns.histplot(df[['MonthlyIncome','Attrition']],
             x='MonthlyIncome',
             kde=True,
             #color='c',
              hue='Attrition',
             alpha=1)

ax.set_title('Overall Attrition Distribution of Employees')
ax.set_xlabel('MonthlyIncome')
ax.set_ylabel('Density')

plt.show()

plt.figure(figsize=(8,4))

ax = sns.histplot(df[['MonthlyIncome','Attrition']],
             x='MonthlyIncome',
             kde=True,
             #color='c',
              hue='Attrition',
             alpha=1)

ax.set_title('Overall Attrition Distribution of Employees')
ax.set_xlabel('MonthlyIncome')
ax.set_ylabel('Density')

plt.show()

generation_data_sum_4 = generation_data.query("Attrition=='Yes'").groupby('Department').size()*100 / generation_data.groupby('Department').size()
generation_data_sum_4 = generation_data_sum_4.reset_index(name="PercentAttrition")

plt.figure(figsize=(8,4))
ax = sns.barplot(data = generation_data_sum_4,x='Department',y='PercentAttrition')

ax.bar_label(ax.containers[0])
#ax.yaxis.set_major_formatter(PercentFormatter(1))

ax.set_xlabel('Department')
ax.set_ylabel('PercentAttrition')
ax.set_title('PercentAttrition vs Department')

generation_data_sum_5 = generation_data.query("Attrition=='Yes'").groupby('EducationField').size()*100 / generation_data.groupby('EducationField').size()
generation_data_sum_5 = generation_data_sum_5.reset_index(name="PercentAttrition")

plt.figure(figsize=(8,4))
ax = sns.barplot(data = generation_data_sum_5,x='EducationField',y='PercentAttrition')

ax.bar_label(ax.containers[0])
#ax.yaxis.set_major_formatter(PercentFormatter(1))

ax.set_xlabel('EducationField')
ax.set_ylabel('PercentAttrition')
ax.set_title('PercentAttrition vs EducationField')

plt.tight_layout()
plt.show()

generation_data_sum_6 = generation_data.query("Attrition=='Yes'").groupby('JobRole').size()*100 / generation_data.groupby('JobRole').size()
generation_data_sum_6 = generation_data_sum_6.reset_index(name="PercentAttrition")

plt.figure(figsize=(10,6))
ax = sns.barplot(data = generation_data_sum_6,y='JobRole',x='PercentAttrition')

ax.bar_label(ax.containers[0])
#ax.yaxis.set_major_formatter(PercentFormatter(1))

ax.set_ylabel('JobRole')
ax.set_xlabel('PercentAttrition')
ax.set_title('PercentAttrition vs JobRole')

plt.tight_layout()
plt.show()

generation_data_sum_7 = generation_data.query("Attrition=='Yes'").groupby('MaritalStatus').size()*100 / generation_data.groupby('MaritalStatus').size()
generation_data_sum_7 = generation_data_sum_7.reset_index(name="PercentAttrition")

plt.figure(figsize=(8,4))
ax = sns.barplot(data = generation_data_sum_7,x='MaritalStatus',y='PercentAttrition')

ax.bar_label(ax.containers[0])
#ax.yaxis.set_major_formatter(PercentFormatter(1))

ax.set_xlabel('MaritalStatus')
ax.set_ylabel('PercentAttrition')
ax.set_title('PercentAttrition vs MaritalStatus')

plt.tight_layout()
plt.show()

generation_data_sum_8 = generation_data.query("Attrition=='Yes'").groupby('BusinessTravel').size()*100 / generation_data.groupby('BusinessTravel').size()
generation_data_sum_8 = generation_data_sum_8.reset_index(name="PercentAttrition")

plt.figure(figsize=(8,4))
ax = sns.barplot(data = generation_data_sum_8,x='BusinessTravel',y='PercentAttrition')

ax.bar_label(ax.containers[0])
#ax.yaxis.set_major_formatter(PercentFormatter(1))

ax.set_xlabel('BusinessTravel')
ax.set_ylabel('PercentAttrition')
ax.set_title('PercentAttrition vs BusinessTravel')

plt.tight_layout()
plt.show()

income_dept_data = df.groupby(['Department','Attrition'])['MonthlyIncome'].mean().round(2).reset_index()
income_dept_data

plt.figure(figsize=(8,6))

ax = sns.barplot(data=income_dept_data,
             x='Department',
             y='MonthlyIncome',
             hue='Attrition')

for container in ax.containers:
    ax.bar_label(container)

ax.set_title('Overall Department wise MonthlyIncome Distribution')
ax.set_xlabel('Department')
ax.set_ylabel('MonthlyIncome')

plt.tight_layout()
plt.show()

income_role_data = df.groupby(['JobRole','Attrition'],sort=True)['MonthlyIncome'].mean().round(2)

income_role_data = income_role_data.reset_index()
income_role_data

plt.figure(figsize=(12,8))

ax = sns.barplot(data=income_role_data,
             y='JobRole',
             x='MonthlyIncome',
             hue='Attrition')

for container in ax.containers:
    ax.bar_label(container)

ax.set_title('Overall JobRole wise MonthlyIncome Distribution')
ax.set_ylabel('JobRole')
ax.set_xlabel('MonthlyIncome')

plt.tight_layout()
plt.show()

income_level_data = df.groupby(['JobLevel','Attrition'])['MonthlyIncome'].mean().round(2).reset_index()

income_level_data

plt.figure(figsize=(8,6))

ax = sns.barplot(data=income_level_data,
             x='JobLevel',
             y='MonthlyIncome',
             hue='Attrition')

for container in ax.containers:
    ax.bar_label(container)

ax.set_title('Overall JobLevel wise MonthlyIncome Distribution')
ax.set_xlabel('JobLevel')
ax.set_ylabel('MonthlyIncome')

plt.tight_layout()
plt.show()

income_job_sat_data = df.groupby(['JobSatisfaction','Attrition'])['MonthlyIncome'].mean().round(2).reset_index()
income_job_sat_data

plt.figure(figsize=(8,6))

ax = sns.barplot(data=income_job_sat_data,
             x='JobSatisfaction',
             y='MonthlyIncome',
             hue='Attrition')

for container in ax.containers:
    ax.bar_label(container)

ax.set_title('Overall JobSatisfaction wise MonthlyIncome Distribution')
ax.set_xlabel('JobSatisfaction')
ax.set_ylabel('MonthlyIncome')

plt.tight_layout()
plt.show()

income_role_level_data = df.groupby(['JobRole','JobLevel','Attrition'])['MonthlyIncome'].mean().round(2).reset_index()

income_role_level_data

unique_roles = income_role_level_data['JobRole'].unique()
unique_roles

f,ax=plt.subplots(9,1,figsize=(8,45))

for i in range(len(unique_roles)):
  subset = income_role_level_data[income_role_level_data['JobRole']==unique_roles[i]]
  sns.barplot(x='JobLevel', y='MonthlyIncome', hue='Attrition', data=subset, ax=ax[i])

  ax[i].set(xlabel="JobLevel",ylabel= "Average Monthly Income")
  ax[i].set_title("Monthly Income among {}".format(unique_roles[i]))

plt.tight_layout()
plt.show()

daily_rate_w_attrition = df.query("Attrition=='Yes'").groupby("JobRole")['DailyRate'].mean().reset_index()

daily_rate_wo_attrition = df.query("Attrition=='No'").groupby("JobRole")['DailyRate'].mean().reset_index()

daily_rate_data = daily_rate_wo_attrition.copy()

daily_rate_data['DailyRate'] = (daily_rate_wo_attrition['DailyRate'] - daily_rate_w_attrition['DailyRate'])*100/daily_rate_wo_attrition['DailyRate']

daily_rate_data['DailyRate'] = daily_rate_data['DailyRate'].round(2)
daily_rate_data.rename(columns={'DailyRate':'pct_rate_diff'},inplace=True)
daily_rate_data = daily_rate_data.sort_values(by=['pct_rate_diff'],ascending=False)

daily_rate_data

plt.figure(figsize=(12,8))

ax = sns.barplot(data=daily_rate_data,
             y='JobRole',
             x='pct_rate_diff')

for container in ax.containers:
    ax.bar_label(container)

ax.set_title('Overall JobRole wise pct_rate_diff Distribution')
ax.set_ylabel('JobRole')
ax.set_xlabel('pct_rate_diff')

plt.tight_layout()
plt.show()

